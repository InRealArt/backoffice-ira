generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public", "landing"]
}

model Artist {
  id              Int              @id @default(autoincrement())
  name            String
  surname         String
  pseudo          String           @unique
  description     String           @unique
  artworkStyle    String?
  publicKey       String           @unique
  imageUrl        String           @unique
  isGallery       Boolean          @default(false)
  backgroundImage String?
  collections     NftCollection[]
  Profile         Profile[]
  BackofficeUser  BackofficeUser[]
  LandingArtist   LandingArtist[]
  PresaleArtworks PresaleArtwork[]

  @@schema("public")
}

model NftCollection {
  id              Int              @id @default(autoincrement())
  name            String
  symbol          String
  addressAdmin    String
  artistId        Int
  contractAddress String?
  transactionHash String?
  status          CollectionStatus @default(pending)
  smartContractId Int?
  artist          Artist           @relation(fields: [artistId], references: [id])
  nftResource     NftResource[]
  smartContract   SmartContract?   @relation(fields: [smartContractId], references: [id])

  @@unique([symbol, smartContractId]) //Contrainte d'unicité composée
  @@schema("public")
}

//To Remove
model Collection {
  id              Int              @id @default(autoincrement())
  name            String
  symbol          String           @unique
  addressAdmin    String
  artistId        Int
  contractAddress String?
  transactionHash String?
  status          CollectionStatus @default(pending)
  smartContractId Int?
  nfts            ResourceNft[]

  @@schema("public")
}

model ResourceNft {
  id              Int                 @id @default(autoincrement())
  tokenId         Int?
  tokenUri        String?             @unique
  status          ResourceNftStatuses
  type            ResourceTypes
  minter          String
  collectionId    Int
  name            String              @unique
  imageUri        String?
  description     String
  certificateUri  String?             @unique
  itemId          Int?                @unique
  mockups         String[]
  owner           String?
  transactionHash String?
  tags            String[]
  purchasedOnce   Boolean?            @default(false)
  previousOwner   String?
  Order           Order[]
  collection      Collection          @relation(fields: [collectionId], references: [id])

  @@schema("public")
}

model NftResource {
  id                      Int                      @id @default(autoincrement())
  tokenId                 Int?
  tokenUri                String?                  @unique
  status                  ResourceNftStatuses
  type                    ResourceTypes
  minter                  String?
  collectionId            Int
  name                    String                   @unique
  imageUri                String?
  description             String
  certificateUri          String?                  @unique
  blockchainItemId        Int?                     @unique
  mockups                 String[]
  owner                   String?
  transactionHash         String?
  tags                    String[]
  purchasedOnce           Boolean?                 @default(false)
  previousOwner           String?
  Order                   Order[]
  collection              NftCollection            @relation(fields: [collectionId], references: [id])
  items                   Item[]
  royaltyBeneficiaries    RoyaltyBeneficiary[]
  marketPlaceTransactions MarketPlaceTransaction[]

  @@schema("public")
}

model Web3Address {
  id        Int       @id @default(autoincrement())
  publicKey String
  role      Web3Roles

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Order {
  id            BigInt       @id @default(autoincrement())
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  nftId         Int
  userId        String       @db.Uuid
  orderStatus   OrderStatus  @default(WAITING_FOR_CONFIRMATION)
  ResourceNft   ResourceNft  @relation(fields: [nftId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nftResource   NftResource? @relation(fields: [nftResourceId], references: [id])
  nftResourceId Int?

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Profile {
  id         BigInt     @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  artistId   Int?
  userRole   UserRoles? @default(SELLER)
  userId     String     @id @db.Uuid
  Artist     Artist?    @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  Order                       Order[]
  Profile                     Profile?

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  tokenId         Int?
  functionName    String?
  transactionHash String?   @unique(map: "Transaction_txHash_key")
  from            String
  to              String
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  price           Decimal?  @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@schema("public")
}

model BackofficeUser {
  id               Int                  @id @default(autoincrement())
  email            String?              @unique
  walletAddress    String?              @unique
  linkedWallets    Json                 @default("[]")
  lastLogin        DateTime             @db.Timestamp(6)
  userMetadata     Json
  role             BackofficeUserRoles?
  firstName        String?
  lastName         String?
  isShopifyGranted Boolean              @default(false)
  createdAt        DateTime             @default(now()) @db.Timestamp(6)
  artistId         Int?
  artist           Artist?              @relation(fields: [artistId], references: [id]) // Nouvelle relation
  items            Item[]

  @@index([email])
  @@index([walletAddress])
  @@index([artistId]) // Nouvel index pour la clé étrangère
  @@schema("public")
}

model Notification {
  id       Int                 @id @default(autoincrement())
  from     String
  sentDate DateTime            @default(now())
  subject  NotificationSubject
  complete Boolean             @default(false)
  status   NotificationStatus?

  @@schema("public")
}

enum NotificationSubject {
  requestShopifyMember

  @@schema("public")
}

enum NotificationStatus {
  APPROVED
  REJECTED

  @@schema("public")
}

enum BackofficeUserRoles {
  admin
  artist
  galleryManager

  @@schema("public")
}

enum ResourceTypes {
  IMAGE
  VIDEO

  @@schema("public")
}

enum Web3Roles {
  MINTER
  ADMIN

  @@schema("public")
}

enum ResourceNftStatuses {
  UPLOADIPFS
  UPLOADCERTIFICATE
  UPLOADMETADATA
  MINED
  ROYALTYSET
  LISTED
  SOLD

  @@schema("public")
}

enum UserRoles {
  SELLER
  PARTNER
  GALLERY
  ADMIN

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum OrderStatus {
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  PROCESS_OF_DELIVERY
  DELIVER

  @@schema("public")
}

enum Chain {
  eth_mainnet
  sepolia
  polygon_mainnet
  polygon_testnet

  @@schema("public")
}

enum CollectionStatus {
  pending
  confirmed
  failed

  @@schema("public")
}

model Item {
  id                          Int               @id @default(autoincrement())
  status                      ItemStatus        @default(created)
  idUser                      Int
  idShopify                   BigInt
  user                        BackofficeUser    @relation(fields: [idUser], references: [id])
  authCertificate             AuthCertificate[]
  nftResource                 NftResource?      @relation(fields: [idNftResource], references: [id])
  idNftResource               Int?
  tags                        String[]          @default([])
  categoryId                  Int?
  category                    ItemCategory?     @relation(fields: [categoryId], references: [id])
  height                      Decimal?          @db.Decimal(10, 2)
  width                       Decimal?          @db.Decimal(10, 2)
  intellectualProperty        Boolean           @default(false)
  intellectualPropertyEndDate DateTime?
  priceBeforeTax              Int               @default(0)
  artworkSupport              String?
  realViewCount               Int               @default(0)
  fakeViewCount               Int               @default(0)
  creationDate                DateTime?

  @@index([idUser])
  @@index([idNftResource])
  @@index([categoryId])
  @@schema("public")
}

model ItemCategory {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]

  @@schema("public")
}

enum ItemStatus {
  created
  pending
  minted
  listed

  @@schema("public")
}

model AuthCertificate {
  id     Int   @id @default(autoincrement())
  idItem Int
  file   Bytes
  item   Item  @relation(fields: [idItem], references: [id])

  @@index([idItem])
  @@schema("public")
}

model SmartContract {
  id                 Int             @id @default(autoincrement())
  factoryAddress     String
  royaltiesAddress   String
  marketplaceAddress String
  active             Boolean
  network            NetworkType
  collections        NftCollection[]

  @@schema("public")
}

enum NetworkType {
  mainnet
  sepolia
  polygon
  polygonAmoy
  arbitrum
  base
  sepoliaBase

  @@schema("public")
}

model RoyaltyBeneficiary {
  id              Int         @id @default(autoincrement())
  wallet          String
  percentage      Int
  totalPercentage Int
  txHash          String?
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])

  @@index([nftResourceId])
  @@schema("public")
}

model MarketPlaceTransaction {
  id              Int         @id @default(autoincrement())
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])
  functionName    String?
  transactionHash String?     @unique(map: "MarketPlaceTransaction_txHash_key")
  from            String
  to              String
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  price           Decimal?    @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@index([nftResourceId])
  @@schema("public")
}

/**
 * *****  SCHEMA LANDING ******
 */

// Définition des langues disponibles
model Language {
  id           Int           @id @default(autoincrement())
  code         String        @unique // ex: fr, en, es
  name         String // ex: Français, English, Español
  isDefault    Boolean       @default(false)
  translations Translation[]

  @@schema("landing")
}

// Table de traduction générique
model Translation {
  id         Int      @id @default(autoincrement())
  entityType String // Le type d'entité (ex: "Team")
  entityId   Int // L'ID de l'entité (ex: ID du membre de l'équipe)
  field      String // Le champ à traduire (ex: "intro", "description")
  value      String // La valeur traduite
  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, field, languageId])
  @@index([entityType, entityId])
  @@index([languageId])
  @@schema("landing")
}

// Modèle Utilisateur
model Team {
  id           Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  role         String
  order        Int?
  intro        String?
  description  String?
  photoUrl1    String?
  photoUrl2    String?
  linkedinUrl  String?
  instagramUrl String?
  facebookUrl  String?
  githubUrl    String?
  twitterUrl   String?
  websiteUrl   String?

  @@schema("landing")
}

// Modèle FAQ
model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  order    Int?

  @@schema("landing")
}

// Modèle LandingArtist
model LandingArtist {
  id            Int      @id @default(autoincrement())
  intro         String?
  artworkImages Json     @default("[]")
  artworkStyle  String?
  artistsPage   Boolean? @default(false)
  imageUrl      String   @unique
  websiteUrl    String?
  facebookUrl   String?
  instagramUrl  String?
  twitterUrl    String?
  linkedinUrl   String?
  artistId      Int
  artist        Artist   @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedFaqHeader {
  id       Int               @id @default(autoincrement())
  name     String
  faqItems DetailedFaqItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedFaqItem {
  id            Int               @id @default(autoincrement())
  question      String
  answer        String
  detailedFaqId Int
  header        DetailedFaqHeader @relation(fields: [detailedFaqId], references: [id])

  @@index([detailedFaqId])
  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedGlossaryHeader {
  id            Int                    @id @default(autoincrement())
  name          String
  glossaryItems DetailedGlossaryItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedGlossaryItem {
  id                 Int                    @id @default(autoincrement())
  question           String
  answer             String
  detailedGlossaryId Int
  header             DetailedGlossaryHeader @relation(fields: [detailedGlossaryId], references: [id])

  @@index([detailedGlossaryId])
  @@schema("landing")
}

model PresaleArtwork {
  id       Int    @id @default(autoincrement())
  name     String
  description String?
  order     Int?
  artistId  Int
  price     Int
  imageUrl    String   @unique
  mockupUrls  Json     @default("[]")
  artist   Artist @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}
