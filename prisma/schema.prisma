generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public", "landing", "marketplace"]
}

// Imported from Marketplace
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Order         Order[]
  Address       Address[]

  @@unique([email])
  @@map("User")
  @@schema("auth")
}

// Orders in the Marketplace
model Order {
  id          Int      @id @default(autoincrement()) // PostgreSQL supporte nativement UUID
  orderNumber String   @unique // Obligatoire pour traçabilité commerciale
  createdAt   DateTime @default(now()) // Date de transaction obligatoire

  // Montants (strictement obligatoires fiscalement)
  subtotalPrice Decimal @db.Decimal(10, 2) // Prix HT
  vatAmount     Decimal @db.Decimal(10, 2) // Montant TVA (obligatoire)
  totalPrice    Decimal @db.Decimal(10, 2) // Prix TTC
  vatRate       Decimal @db.Decimal(5, 2) // Taux de TVA appliqué

  // Facturation (obligatoire)
  invoiceNumber String? // Obligatoire pour la facturation en France
  paidAt        DateTime? // Date de paiement (obligation comptable)
  paymentMethod String // Méthode de paiement (obligation de traçabilité)

  // Client (minimum RGPD)
  customerId    String
  customerName  String
  customerEmail String
  customer      User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Adresse de facturation (obligatoire fiscalement)
  billingAddressId     Int
  // Adresse figée
  billingStreetAddress String
  billingPostalCode    String
  billingCity          String
  billingCountry       String
  billingVatNumber     String?

  billingAddress Address @relation(fields: [billingAddressId], references: [id])

  // Éléments achetés
  items OrderItem[]

  @@index([customerId])
  @@index([orderNumber])
  @@map("Order")
  @@schema("marketplace")
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  artworkId Int
  artwork   Item @relation(fields: [artworkId], references: [id])

  // Données figées obligatoires (pour conformité facture)
  title String // Nom du bien vendu (obligation facture)
  isNft Boolean @default(false)

  // Prix (obligatoire fiscalement)
  unitPrice  Decimal @db.Decimal(10, 2) // Prix unitaire HT
  vatRate    Decimal @db.Decimal(5, 2) // Taux TVA
  vatAmount  Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice Decimal @db.Decimal(10, 2) // Prix TTC

  @@index([orderId])
  @@index([artworkId])
  @@map("OrderItem")
  @@schema("marketplace")
}

model Invoice {
  id            Int       @id @default(autoincrement())
  invoiceNumber String    @unique // Numéro de facture obligatoire
  createdAt     DateTime  @default(now()) // Date d'émission de la facture
  dueDate       DateTime? // Date d'échéance de paiement

  // Référence à la commande d'origine
  orderId     Int      @unique
  orderNumber String // Numéro de commande lié
  orderDate   DateTime // Date de la commande

  // Montants (strictement obligatoires fiscalement)
  subtotalPrice Decimal @db.Decimal(10, 2) // Prix HT
  vatAmount     Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice    Decimal @db.Decimal(10, 2) // Prix TTC
  vatRate       Decimal @db.Decimal(5, 2) // Taux de TVA appliqué

  // Statut de paiement
  paidAt        DateTime? // Date du paiement
  paymentMethod String // Méthode de paiement
  isPaid        Boolean   @default(false)

  // Informations du vendeur (fixes)
  sellerName      String // Nom de la société
  sellerAddress   String // Adresse du vendeur
  sellerVatNumber String? // Numéro de TVA intracommunautaire
  sellerSiret     String // Numéro SIRET
  sellerEmail     String // Email de contact

  // Client (données figées pour historique)
  customerName  String // Nom complet du client
  customerEmail String // Email du client
  customerId    String // ID du client dans le système

  // Adresse de facturation (figée)
  billingAddressFullname  String
  billingAddressStreet    String
  billingAddressCity      String
  billingAddressPostCode  String
  billingAddressCountry   String
  billingAddressVatNumber String? // Pour clients professionnels

  // Éléments de la facture (copiés depuis la commande)
  items InvoiceItem[]

  // Champs spécifiques pour conformité légale
  legalMentions String // Mentions légales obligatoires
  paymentTerms  String // Conditions de paiement
  invoiceType   InvoiceType @default(INVOICE) // Type de document (facture, avoir, etc.)

  // Références pour recherches
  @@index([orderNumber])
  @@index([invoiceNumber])
  @@index([customerId])
  @@map("Invoice")
  @@schema("marketplace")
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Données figées de l'article (pour historique complet)
  title       String // Nom du produit
  description String? // Description du produit
  isNft       Boolean @default(false)
  artworkId   Int // Référence à l'œuvre

  // Prix (obligatoire fiscalement)
  unitPrice  Decimal @db.Decimal(10, 2) // Prix unitaire HT
  vatRate    Decimal @db.Decimal(5, 2) // Taux TVA
  vatAmount  Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice Decimal @db.Decimal(10, 2) // Prix TTC

  @@index([invoiceId])
  @@map("InvoiceItem")
  @@schema("marketplace")
}

enum InvoiceType {
  INVOICE // Facture standard
  CREDIT_NOTE // Avoir
  PROFORMA // Facture proforma
  RECEIPT // Reçu

  @@schema("marketplace")
}

model Address {
  id Int @id @default(autoincrement())
  name String //Name for the adddress
  // Champs minimums obligatoires pour facturation valide
  firstName     String
  lastName      String
  streetAddress String
  postalCode    String
  city          String
  country       String // Country name (for VAT rules)
  countryCode   String // Country code (for VAT rules)

  // Numéro TVA pour B2B (obligatoire si client professionnel)
  vatNumber String?

  // Relations Customer (adress d'un client dans la marketplace)
  customer         User?          @relation(fields: [customerId], references: [id])
  customerId       String?
  // Relations BackofficeUser (adress d'un artiste dans le backoffice)
  backofficeUser   BackofficeUser? @relation(fields: [backofficeUserId], references: [id], onDelete: Cascade)
  backofficeUserId Int?

  orders Order[]
  thirdPartyAddresses ThirdPartyAddress[]

  @@map("Address")
  @@schema("public")
}

model ThirdPartyAddress {
  id String @id

  // Relations Customer (adress d'un client dans la marketplace)
  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  @@schema("public")
}

model Artist {
  id              Int              @id @default(autoincrement())
  name            String
  surname         String
  pseudo          String           @unique
  description     String           @unique
  artworkStyle    String?
  publicKey       String           @unique
  imageUrl        String           @unique
  isGallery       Boolean          @default(false)
  backgroundImage String?
  collections     NftCollection[]
  Profile         Profile[]
  BackofficeUser  BackofficeUser[]
  LandingArtist   LandingArtist[]
  PresaleArtworks PresaleArtwork[]

  @@schema("public")
}

model NftCollection {
  id              Int              @id @default(autoincrement())
  name            String
  symbol          String
  addressAdmin    String
  artistId        Int
  contractAddress String?
  transactionHash String?
  status          CollectionStatus @default(pending)
  smartContractId Int?
  artist          Artist           @relation(fields: [artistId], references: [id])
  nftResource     NftResource[]
  smartContract   SmartContract?   @relation(fields: [smartContractId], references: [id])

  @@unique([symbol, smartContractId]) //Contrainte d'unicité composée
  @@schema("public")
}

model NftResource {
  id                      Int                      @id @default(autoincrement())
  tokenId                 Int?
  tokenUri                String?                  @unique
  status                  ResourceNftStatuses
  type                    ResourceTypes
  minter                  String?
  collectionId            Int
  name                    String                   @unique
  imageUri                String?
  description             String
  certificateUri          String?                  @unique
  blockchainItemId        Int?                     @unique
  mockups                 String[]
  owner                   String?
  transactionHash         String?
  tags                    String[]
  purchasedOnce           Boolean?                 @default(false)
  previousOwner           String?
  collection              NftCollection            @relation(fields: [collectionId], references: [id])
  items                   Item[]
  royaltyBeneficiaries    RoyaltyBeneficiary[]
  marketPlaceTransactions MarketPlaceTransaction[]

  @@schema("public")
}

model Web3Address {
  id        Int       @id @default(autoincrement())
  publicKey String
  role      Web3Roles

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Profile {
  id         BigInt     @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  artistId   Int?
  userRole   UserRoles? @default(SELLER)
  userId     String     @id @db.Uuid
  Artist     Artist?    @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  tokenId         Int?
  functionName    String?
  transactionHash String?   @unique(map: "Transaction_txHash_key")
  from            String
  to              String
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  price           Decimal?  @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@schema("public")
}

model BackofficeUser {
  id               Int                     @id @default(autoincrement())
  email            String?                 @unique
  walletAddress    String?                 @unique
  linkedWallets    Json                    @default("[]")
  lastLogin        DateTime                @db.Timestamp(6)
  userMetadata     Json
  role             BackofficeUserRoles?
  firstName        String?
  lastName         String?
  isShopifyGranted Boolean                 @default(false)
  createdAt        DateTime                @default(now()) @db.Timestamp(6)
  artistId         Int?
  artist           Artist?                 @relation(fields: [artistId], references: [id]) // Nouvelle relation
  items            Item[]
  addresses        Address[]
  @@index([email])
  @@index([walletAddress])
  @@index([artistId]) // Nouvel index pour la clé étrangère
  @@schema("public")
}

model Notification {
  id       Int                 @id @default(autoincrement())
  from     String
  sentDate DateTime            @default(now())
  subject  NotificationSubject
  complete Boolean             @default(false)
  status   NotificationStatus?

  @@schema("public")
}

enum NotificationSubject {
  requestShopifyMember

  @@schema("public")
}

enum NotificationStatus {
  APPROVED
  REJECTED

  @@schema("public")
}

enum BackofficeUserRoles {
  admin
  artist
  galleryManager

  @@schema("public")
}

enum ResourceTypes {
  IMAGE
  VIDEO

  @@schema("public")
}

enum Web3Roles {
  MINTER
  ADMIN

  @@schema("public")
}

enum ResourceNftStatuses {
  UPLOADIPFS
  UPLOADCERTIFICATE
  UPLOADMETADATA
  MINED
  ROYALTYSET
  LISTED
  SOLD

  @@schema("public")
}

enum UserRoles {
  SELLER
  PARTNER
  GALLERY
  ADMIN

  @@schema("public")
}

enum OrderStatus {
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  PROCESS_OF_DELIVERY
  DELIVER

  @@schema("public")
}

enum Chain {
  eth_mainnet
  sepolia
  polygon_mainnet
  polygon_testnet

  @@schema("public")
}

enum CollectionStatus {
  pending
  confirmed
  failed

  @@schema("public")
}

model Item {
  id                            Int               @id @default(autoincrement())
  name                          String
  description                   String
  status                        ItemStatus        @default(created)
  idUser                        Int
  qtyPhysicalArt                Int               @default(1)
  user                          BackofficeUser    @relation(fields: [idUser], references: [id])
  authCertificate               AuthCertificate[]
  nftResource                   NftResource?      @relation(fields: [idNftResource], references: [id])
  idNftResource                 Int?
  tags                          String[]          @default([])
  categoryId                    Int?
  category                      ItemCategory?     @relation(fields: [categoryId], references: [id])
  height                        Decimal?          @db.Decimal(10, 2)
  width                         Decimal?          @db.Decimal(10, 2)
  weight                        Decimal?          @db.Decimal(10, 2)
  intellectualProperty          Boolean           @default(false)
  intellectualPropertyEndDate   DateTime?
  priceNftBeforeTax             Int?              @default(0)
  pricePhysicalBeforeTax        Int?              @default(0)
  priceNftPlusPhysicalBeforeTax Int?              @default(0)
  artworkSupport                String?
  realViewCount                 Int               @default(0)
  fakeViewCount                 Int               @default(0)
  creationYear                  Int?
  slug                          String?           @unique
  metaDescription               String
  metaTitle                     String
  mainImageUrl                  String?
  secondaryImagesUrl            String[]          @default([])

  // Relations
  orderItems OrderItem[]

  @@index([idUser])
  @@index([idNftResource])
  @@index([categoryId])
  @@schema("public")
}

model ItemCategory {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]

  @@schema("public")
}

enum ItemStatus {
  created
  pending
  minted
  listed

  @@schema("public")
}

model AuthCertificate {
  id     Int   @id @default(autoincrement())
  idItem Int
  file   Bytes
  item   Item  @relation(fields: [idItem], references: [id], onDelete: Cascade)

  @@index([idItem])
  @@schema("public")
}

model SmartContract {
  id                 Int             @id @default(autoincrement())
  factoryAddress     String
  royaltiesAddress   String
  marketplaceAddress String
  active             Boolean
  network            NetworkType
  collections        NftCollection[]

  @@schema("public")
}

enum NetworkType {
  mainnet
  sepolia
  polygon
  polygonAmoy
  arbitrum
  base
  sepoliaBase

  @@schema("public")
}

model RoyaltyBeneficiary {
  id              Int         @id @default(autoincrement())
  wallet          String
  percentage      Int
  totalPercentage Int
  txHash          String?
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])

  @@index([nftResourceId])
  @@schema("public")
}

model MarketPlaceTransaction {
  id              Int         @id @default(autoincrement())
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])
  functionName    String?
  transactionHash String?     @unique(map: "MarketPlaceTransaction_txHash_key")
  from            String
  to              String
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  price           Decimal?    @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@index([nftResourceId])
  @@schema("public")
}

/**
 * *****  SCHEMA LANDING ******
 */

// Définition des langues disponibles
model Language {
  id           Int           @id @default(autoincrement())
  code         String        @unique // ex: fr, en, es
  name         String // ex: Français, English, Español
  isDefault    Boolean       @default(false)
  translations Translation[]

  @@schema("landing")
}

// Table de traduction générique
model Translation {
  id         Int      @id @default(autoincrement())
  entityType String // Le type d'entité (ex: "Team")
  entityId   Int // L'ID de l'entité (ex: ID du membre de l'équipe)
  field      String // Le champ à traduire (ex: "intro", "description")
  value      String?
  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, field, languageId])
  @@index([entityType, entityId])
  @@index([languageId])
  @@schema("landing")
}

// Modèle Utilisateur
model Team {
  id           Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  role         String
  order        Int?
  intro        String?
  description  String?
  photoUrl1    String?
  photoUrl2    String?
  linkedinUrl  String?
  instagramUrl String?
  facebookUrl  String?
  githubUrl    String?
  twitterUrl   String?
  websiteUrl   String?

  @@schema("landing")
}

// Modèle FAQ
model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  order    Int?

  @@schema("landing")
}

// Modèle LandingArtist
model LandingArtist {
  id            Int      @id @default(autoincrement())
  slug          String   @unique
  intro         String?
  description   String?
  artworkImages Json     @default("[]")
  artworkStyle  String?
  artistsPage   Boolean? @default(false)
  imageUrl      String   @unique
  websiteUrl    String?
  facebookUrl   String?
  instagramUrl  String?
  twitterUrl    String?
  linkedinUrl   String?
  artistId      Int
  artist        Artist   @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedFaqHeader {
  id       Int               @id @default(autoincrement())
  name     String
  faqItems DetailedFaqItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedFaqItem {
  id            Int               @id @default(autoincrement())
  question      String
  answer        String
  detailedFaqId Int
  header        DetailedFaqHeader @relation(fields: [detailedFaqId], references: [id])

  @@index([detailedFaqId])
  @@schema("landing")
}

model DetailedFaqPage {
  id       Int                   @id @default(autoincrement())
  name     LandingPage
  faqItems DetailedFaqPageItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedFaqPageItem {
  id                Int             @id @default(autoincrement())
  question          String
  answer            String
  detailedFaqPageId Int
  order             Int             @default(1)
  page              DetailedFaqPage @relation(fields: [detailedFaqPageId], references: [id])

  @@index([detailedFaqPageId])
  @@schema("landing")
}

enum LandingPage {
  root               @map("/")
  marketplace        @map("/marketplace")
  token              @map("/token")
  usecase            @map("/usecase")
  usecaseLeasing     @map("/usecase/leasing")
  usecaseLending     @map("/usecase/lending")
  usecaseFractionate @map("/usecase/fractionate")
  usecaseCompanies   @map("/usecase/companies")
  roadmap            @map("/roadmap")
  presale            @map("/presale")

  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedGlossaryHeader {
  id            Int                    @id @default(autoincrement())
  name          String
  glossaryItems DetailedGlossaryItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedGlossaryItem {
  id                 Int                    @id @default(autoincrement())
  question           String
  answer             String
  detailedGlossaryId Int
  header             DetailedGlossaryHeader @relation(fields: [detailedGlossaryId], references: [id])

  @@index([detailedGlossaryId])
  @@schema("landing")
}

model PresaleArtwork {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  order       Int?
  artistId    Int
  price       Int?
  imageUrl    String  @unique
  mockupUrls  Json    @default("[]")
  artist      Artist  @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}

model BlogPost {
  id Int @id @default(autoincrement())

  slug            String   @unique
  title           String
  metaDescription String
  metaKeywords    String[] // Tableau de mots-clés
  canonicalUrl    String?

  // Auteur (relation ou embedded)
  author String

  // Dates
  datePublished DateTime
  dateModified  DateTime @updatedAt

  // Images
  featuredImageUrl    String
  featuredImageAlt    String
  featuredImageWidth  Int
  featuredImageHeight Int

  // Contenu
  introduction String @db.Text
  content      String @db.Text

  // SEO et catégorisation
  tags              String[]
  estimatedReadTime Int?

  // Statut
  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Relations
  relatedArticles String[]

  // SEO avancé
  structuredData String? @db.Text
  openGraphData  Json?
  twitterData    Json?

  viewsCount Int      @default(0)
  createdAt  DateTime @default(now())

  @@schema("landing")
}
