generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public", "landing", "marketplace", "blockchain", "landingUi", "backoffice"]
}

// Imported from Marketplace
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Order         Order[]
  Address       Address[]

  @@unique([email])
  @@map("User")
  @@schema("auth")
}

// Orders in the Marketplace
model Order {
  id          Int      @id @default(autoincrement()) // PostgreSQL supporte nativement UUID
  orderNumber String   @unique // Obligatoire pour traçabilité commerciale
  createdAt   DateTime @default(now()) // Date de transaction obligatoire

  // Montants (strictement obligatoires fiscalement)
  subtotalPrice Decimal @db.Decimal(10, 2) // Prix HT
  vatAmount     Decimal @db.Decimal(10, 2) // Montant TVA (obligatoire)
  totalPrice    Decimal @db.Decimal(10, 2) // Prix TTC
  vatRate       Decimal @db.Decimal(5, 2) // Taux de TVA appliqué

  // Facturation (obligatoire)
  invoiceNumber String? // Obligatoire pour la facturation en France
  paidAt        DateTime? // Date de paiement (obligation comptable)
  paymentMethod String // Méthode de paiement (obligation de traçabilité)

  // Client (minimum RGPD)
  customerId    String
  customerName  String
  customerEmail String
  customer      User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Adresse de facturation (obligatoire fiscalement)
  billingAddressId     Int
  // Adresse figée
  billingStreetAddress String
  billingPostalCode    String
  billingCity          String
  billingCountry       String
  billingVatNumber     String?

  billingAddress Address @relation(fields: [billingAddressId], references: [id])

  // Éléments achetés
  items OrderItem[]

  @@index([customerId])
  @@index([orderNumber])
  @@map("Order")
  @@schema("marketplace")
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Nouvelles relations directes avec NftItem et PhysicalItem
  nftItemId      Int?
  nftItem        NftItem?      @relation(fields: [nftItemId], references: [id])
  physicalItemId Int?
  physicalItem   PhysicalItem? @relation(fields: [physicalItemId], references: [id])

  // Données figées obligatoires (pour conformité facture)
  title String // Nom du bien vendu (obligation facture)

  // Prix (obligatoire fiscalement)
  unitPrice  Decimal @db.Decimal(10, 2) // Prix unitaire HT
  vatRate    Decimal @db.Decimal(5, 2) // Taux TVA
  vatAmount  Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice Decimal @db.Decimal(10, 2) // Prix TTC

  @@index([orderId])
  @@index([nftItemId])
  @@index([physicalItemId])
  @@map("OrderItem")
  @@schema("marketplace")
}

model Invoice {
  id            Int       @id @default(autoincrement())
  invoiceNumber String    @unique // Numéro de facture obligatoire
  createdAt     DateTime  @default(now()) // Date d'émission de la facture
  dueDate       DateTime? // Date d'échéance de paiement

  // Référence à la commande d'origine
  orderId     Int      @unique
  orderNumber String // Numéro de commande lié
  orderDate   DateTime // Date de la commande

  // Montants (strictement obligatoires fiscalement)
  subtotalPrice Decimal @db.Decimal(10, 2) // Prix HT
  vatAmount     Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice    Decimal @db.Decimal(10, 2) // Prix TTC
  vatRate       Decimal @db.Decimal(5, 2) // Taux de TVA appliqué

  // Statut de paiement
  paidAt        DateTime? // Date du paiement
  paymentMethod String // Méthode de paiement
  isPaid        Boolean   @default(false)

  // Informations du vendeur (fixes)
  sellerName      String // Nom de la société
  sellerAddress   String // Adresse du vendeur
  sellerVatNumber String? // Numéro de TVA intracommunautaire
  sellerSiret     String // Numéro SIRET
  sellerEmail     String // Email de contact

  // Client (données figées pour historique)
  customerName  String // Nom complet du client
  customerEmail String // Email du client
  customerId    String // ID du client dans le système

  // Adresse de facturation (figée)
  billingAddressFullname  String
  billingAddressStreet    String
  billingAddressCity      String
  billingAddressPostCode  String
  billingAddressCountry   String
  billingAddressVatNumber String? // Pour clients professionnels

  // Éléments de la facture (copiés depuis la commande)
  items InvoiceItem[]

  // Champs spécifiques pour conformité légale
  legalMentions String // Mentions légales obligatoires
  paymentTerms  String // Conditions de paiement
  invoiceType   InvoiceType @default(INVOICE) // Type de document (facture, avoir, etc.)

  // Références pour recherches
  @@index([orderNumber])
  @@index([invoiceNumber])
  @@index([customerId])
  @@map("Invoice")
  @@schema("marketplace")
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Nouvelles relations directes avec NftItem et PhysicalItem
  nftItemId      Int?
  nftItem        NftItem?      @relation(fields: [nftItemId], references: [id])
  physicalItemId Int?
  physicalItem   PhysicalItem? @relation(fields: [physicalItemId], references: [id])

  // Données figées de l'article (pour historique complet)
  title       String // Nom du produit
  description String? // Description du produit

  // Prix (obligatoire fiscalement)
  unitPrice  Decimal @db.Decimal(10, 2) // Prix unitaire HT
  vatRate    Decimal @db.Decimal(5, 2) // Taux TVA
  vatAmount  Decimal @db.Decimal(10, 2) // Montant TVA
  totalPrice Decimal @db.Decimal(10, 2) // Prix TTC

  @@index([invoiceId])
  @@index([nftItemId])
  @@index([physicalItemId])
  @@map("InvoiceItem")
  @@schema("marketplace")
}

enum InvoiceType {
  INVOICE // Facture standard
  CREDIT_NOTE // Avoir
  PROFORMA // Facture proforma
  RECEIPT // Reçu

  @@schema("marketplace")
}

model Address {
  id            Int    @id @default(autoincrement())
  name          String //Name for the adddress
  // Champs minimums obligatoires pour facturation valide
  firstName     String
  lastName      String
  streetAddress String
  postalCode    String
  city          String
  country       String // Country name (for VAT rules)
  countryCode   String // Country code (for VAT rules)

  // Numéro TVA pour B2B (obligatoire si client professionnel)
  vatNumber String?

  // Relations Customer (adress d'un client dans la marketplace)
  customer         User?           @relation(fields: [customerId], references: [id])
  customerId       String?
  // Relations BackofficeUser (adress d'un artiste dans le backoffice)
  backofficeUser   BackofficeUser? @relation(fields: [backofficeUserId], references: [id], onDelete: Cascade)
  backofficeUserId Int?

  // Relations BackofficeAuthUser (adresse d'un utilisateur auth backoffice)
  backofficeAuthUser   BackofficeAuthUser? @relation(fields: [backofficeAuthUserId], references: [id], onDelete: Cascade)
  backofficeAuthUserId String?

  orders              Order[]
  thirdPartyAddresses ThirdPartyAddress[]
  physicalItems       PhysicalItem[]      @relation("PhysicalItemShipping")
  Country             Country?            @relation(fields: [countryCode], references: [code])

  @@map("Address")
  @@schema("public")
}

model ThirdPartyAddress {
  id String @id

  // Relations Customer (adress d'un client dans la marketplace)
  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  @@schema("public")
}

model ArtistCategory {
  id               Int                    @id @default(autoincrement())
  name             String
  imageUrl         String? //Image visible for the category card on landing & MP
  description      String?
  order            Int?
  slug             String?                @unique
  artistCategories ArtistCategoryArtist[]

  @@schema("public")
}

// Données intrinsèques à l'artiste
model Artist {
  id                 Int                  @id @default(autoincrement())
  name               String
  surname            String
  pseudo             String               @unique
  description        String               @unique
  publicKey          String               @unique
  imageUrl           String               @unique
  isGallery          Boolean              @default(false)
  backgroundImage    String?
  slug               String?              @unique
  birthYear          Int?
  featuredArtwork    String?
  countryCode        String?
  websiteUrl         String?
  facebookUrl        String?
  instagramUrl       String?
  twitterUrl         String?
  linkedinUrl        String?
  collections        NftCollection[]
  Profile            Profile[]
  BackofficeUser     BackofficeUser[]
  LandingArtist      LandingArtist[]
  PresaleArtworks    PresaleArtwork[]
  Country            Country?             @relation(fields: [countryCode], references: [code])
  items              Item[]
  BackofficeAuthUser BackofficeAuthUser[]

  @@schema("public")
}

// Modèle LandingArtist : données affichées sur la landing
model LandingArtist {
  id                 Int                    @id @default(autoincrement())
  slug               String                 @unique
  intro              String?
  description        String?
  artworkImages      Json                   @default("[]")
  artworkStyle       String?
  artistsPage        Boolean?               @default(false)
  imageUrl           String                 @unique
  secondaryImageUrl  String?
  artistId           Int
  //Champs pour le descriptif détaillé de l'artiste sur la landing
  mediumTags         String[]               @default([])
  quoteFromInRealArt String?
  biographyHeader1   String?
  biographyText1     String?
  biographyHeader2   String?
  biographyText2     String?
  biographyHeader3   String?
  biographyText3     String?
  biographyHeader4   String?
  biographyText4     String?
  imageArtistStudio  String?
  artistCategories   ArtistCategoryArtist[]
  artist             Artist                 @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}

model ArtistCategoryArtist {
  id              Int            @id @default(autoincrement())
  landingArtistId Int
  categoryId      Int
  landingArtist   LandingArtist  @relation(fields: [landingArtistId], references: [id])
  category        ArtistCategory @relation(fields: [categoryId], references: [id])

  @@unique([landingArtistId, categoryId])
  @@map("ArtistCategoryArtist")
  @@schema("public")
}

model NftCollection {
  id              Int              @id @default(autoincrement())
  name            String
  symbol          String
  addressAdmin    String
  artistId        Int
  contractAddress String?
  transactionHash String?
  status          CollectionStatus @default(pending)
  smartContractId Int?
  artist          Artist           @relation(fields: [artistId], references: [id])
  nftResource     NftResource[]
  smartContract   SmartContract?   @relation(fields: [smartContractId], references: [id])

  @@unique([symbol, smartContractId]) //Contrainte d'unicité composée
  @@schema("public")
}

model NftResource {
  id                      Int                      @id @default(autoincrement())
  tokenId                 Int?
  tokenUri                String?                  @unique
  status                  ResourceNftStatuses
  type                    ResourceTypes
  minter                  String?
  collectionId            Int
  name                    String                   @unique
  imageUri                String?
  description             String
  certificateUri          String?                  @unique
  blockchainItemId        Int?                     @unique
  mockups                 String[]
  owner                   String?
  transactionHash         String?
  tags                    String[]
  purchasedOnce           Boolean?                 @default(false)
  previousOwner           String?
  collection              NftCollection            @relation(fields: [collectionId], references: [id])
  royaltyBeneficiaries    RoyaltyBeneficiary[]
  marketPlaceTransactions MarketPlaceTransaction[]
  NftItem                 NftItem[]

  @@schema("public")
}

model Web3Address {
  id        Int       @id @default(autoincrement())
  publicKey String
  role      Web3Roles

  @@schema("blockchain")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Profile {
  id         BigInt     @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  artistId   Int?
  userRole   UserRoles? @default(SELLER)
  userId     String     @id @db.Uuid
  Artist     Artist?    @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  tokenId         Int?
  functionName    String?
  transactionHash String?   @unique(map: "Transaction_txHash_key")
  from            String
  to              String
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  price           Decimal?  @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@schema("blockchain")
}

model BackofficeUser {
  id            Int                  @id @default(autoincrement())
  email         String?              @unique
  walletAddress String?              @unique
  linkedWallets Json                 @default("[]")
  lastLogin     DateTime             @db.Timestamp(6)
  userMetadata  Json
  role          BackofficeUserRoles?
  firstName     String?
  lastName      String?
  createdAt     DateTime             @default(now()) @db.Timestamp(6)
  artistId      Int?
  artist        Artist?              @relation(fields: [artistId], references: [id]) // Nouvelle relation
  items         Item[]
  addresses     Address[]

  @@index([email])
  @@index([walletAddress])
  @@index([artistId]) // Nouvel index pour la clé étrangère
  @@schema("public")
}

enum BackofficeUserRoles {
  admin
  artist
  galleryManager

  @@schema("backoffice")
}

enum ResourceTypes {
  IMAGE
  VIDEO

  @@schema("public")
}

enum Web3Roles {
  MINTER
  ADMIN

  @@schema("public")
}

enum ResourceNftStatuses {
  UPLOADIPFS
  UPLOADCERTIFICATE
  UPLOADMETADATA
  MINED
  ROYALTYSET
  LISTED
  SOLD

  @@schema("public")
}

enum UserRoles {
  SELLER
  PARTNER
  GALLERY
  ADMIN

  @@schema("public")
}

enum OrderStatus {
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  PROCESS_OF_DELIVERY
  DELIVER

  @@schema("public")
}

enum Chain {
  eth_mainnet
  sepolia
  polygon_mainnet
  polygon_testnet

  @@schema("blockchain")
}

enum CollectionStatus {
  pending
  confirmed
  failed

  @@schema("public")
}

model Item {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String
  idUser             Int
  user               BackofficeUser    @relation(fields: [idUser], references: [id])
  artistId           Int?
  artist             Artist?           @relation(fields: [artistId], references: [id])
  tags               String[]          @default([])
  slug               String?           @unique
  metaDescription    String
  metaTitle          String
  mainImageUrl       String?
  secondaryImagesUrl String[]          @default([])
  realViewCount      Int               @default(0)
  fakeViewCount      Int               @default(0)
  featured           Boolean?          @default(false)
  // Nouvelles relations pour les caractéristiques artistiques
  mediumId           Int?
  medium             ArtworkMedium?    @relation(fields: [mediumId], references: [id])
  styleId            Int?
  style              ArtworkStyle?     @relation(fields: [styleId], references: [id])
  techniqueId        Int?
  technique          ArtworkTechnique? @relation(fields: [techniqueId], references: [id])

  createdAt DateTime @default(now()) @db.Date

  // Relations
  nftItem      NftItem?
  physicalItem PhysicalItem?

  @@index([idUser])
  @@index([artistId])
  @@index([mediumId])
  @@index([styleId])
  @@index([techniqueId])
  @@schema("public")
}

model NftItem {
  id              Int              @id @default(autoincrement())
  itemId          Int              @unique
  item            Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  idNftResource   Int?
  nftResource     NftResource?     @relation(fields: [idNftResource], references: [id])
  price           Int              @default(0)
  status          NftItemStatus    @default(created)
  authCertificate AuthCertificate?
  orderItems      OrderItem[]
  invoiceItems    InvoiceItem[]

  @@index([itemId])
  @@index([idNftResource])
  @@schema("public")
}

model PhysicalItem {
  id                Int                @id @default(autoincrement())
  itemId            Int                @unique
  item              Item               @relation(fields: [itemId], references: [id], onDelete: Cascade)
  price             Int                @default(0)
  status            PhysicalItemStatus @default(created)
  stockQty          Int                @default(0)
  initialQty        Int                @default(1)
  height            Decimal?           @db.Decimal(10, 2)
  width             Decimal?           @db.Decimal(10, 2)
  weight            Decimal?           @db.Decimal(10, 2)
  thickness         Decimal?           @db.Decimal(10, 2)
  unitHeight        String?            @default("cm")
  unitWidth         String?            @default("cm")
  unitWeight        String?            @default("kg")
  unitThickness     String?            @default("cm")
  creationYear      Int?
  shippingAddressId Int?
  shippingAddress   Address?           @relation("PhysicalItemShipping", fields: [shippingAddressId], references: [id])
  orderItems        OrderItem[]
  invoiceItems      InvoiceItem[]
  authCertificate   AuthCertificate?

  @@index([itemId])
  @@index([shippingAddressId])
  @@schema("public")
}

enum NftItemStatus {
  created
  pending
  minted
  listed
  sold

  @@schema("public")
}

enum PhysicalItemStatus {
  created
  pending
  listed
  sold

  @@schema("public")
}

enum ItemStatus {
  created
  pending
  minted
  listed

  @@schema("public")
}

model AuthCertificate {
  id             Int           @id @default(autoincrement())
  nftItemId      Int?          @unique
  nftItem        NftItem?      @relation(fields: [nftItemId], references: [id], onDelete: Cascade)
  physicalItemId Int?          @unique
  physicalItem   PhysicalItem? @relation(fields: [physicalItemId], references: [id], onDelete: Cascade)
  file           Bytes

  @@index([nftItemId])
  @@index([physicalItemId])
  @@schema("public")
}

model SmartContract {
  id                 Int             @id @default(autoincrement())
  factoryAddress     String
  royaltiesAddress   String
  marketplaceAddress String
  active             Boolean
  network            NetworkType
  collections        NftCollection[]

  @@schema("blockchain")
}

enum NetworkType {
  mainnet
  sepolia
  polygon
  polygonAmoy
  arbitrum
  base
  sepoliaBase

  @@schema("blockchain")
}

model RoyaltyBeneficiary {
  id              Int         @id @default(autoincrement())
  wallet          String
  percentage      Int
  totalPercentage Int
  txHash          String?
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])

  @@index([nftResourceId])
  @@schema("blockchain")
}

model MarketPlaceTransaction {
  id              Int         @id @default(autoincrement())
  nftResourceId   Int
  nftResource     NftResource @relation(fields: [nftResourceId], references: [id])
  functionName    String?
  transactionHash String?     @unique(map: "MarketPlaceTransaction_txHash_key")
  from            String
  to              String
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  price           Decimal?    @db.Decimal
  transferFrom    String?
  transferTo      String?
  contractAddress String?

  @@index([nftResourceId])
  @@schema("blockchain")
}

/**
 * *****  SCHEMA LANDING ******
 */

// Définition des langues disponibles
model Language {
  id           Int           @id @default(autoincrement())
  code         String        @unique // ex: fr, en, es
  name         String // ex: Français, English, Español
  isDefault    Boolean       @default(false)
  translations Translation[]
  seoPosts     SeoPost[] // Nouvelle relation

  @@schema("landing")
}

// Table de traduction générique
model Translation {
  id         Int      @id @default(autoincrement())
  entityType String // Le type d'entité (ex: "Team")
  entityId   Int // L'ID de l'entité (ex: ID du membre de l'équipe)
  field      String // Le champ à traduire (ex: "intro", "description")
  value      String?
  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, field, languageId])
  @@index([entityType, entityId])
  @@index([languageId])
  @@schema("landing")
}

// Modèle Utilisateur
model Team {
  id           Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  role         String
  order        Int?
  intro        String?
  description  String?
  photoUrl1    String?
  photoUrl2    String?
  linkedinUrl  String?
  instagramUrl String?
  facebookUrl  String?
  githubUrl    String?
  twitterUrl   String?
  websiteUrl   String?

  @@schema("landing")
}

// Modèle FAQ
model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  order    Int?

  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedFaqHeader {
  id       Int               @id @default(autoincrement())
  name     String
  faqItems DetailedFaqItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedFaqItem {
  id            Int               @id @default(autoincrement())
  question      String
  answer        String
  detailedFaqId Int
  header        DetailedFaqHeader @relation(fields: [detailedFaqId], references: [id])

  @@index([detailedFaqId])
  @@schema("landing")
}

model DetailedFaqPage {
  id       Int                   @id @default(autoincrement())
  name     LandingPage
  faqItems DetailedFaqPageItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedFaqPageItem {
  id                Int             @id @default(autoincrement())
  question          String
  answer            String
  detailedFaqPageId Int
  order             Int             @default(1)
  page              DetailedFaqPage @relation(fields: [detailedFaqPageId], references: [id])

  @@index([detailedFaqPageId])
  @@schema("landing")
}

enum LandingPage {
  root                               @map("/")
  artists                            @map("/artists")
  marketplace                        @map("/marketplace")
  token                              @map("/token")
  usecase                            @map("/usecase")
  usecaseLeasing                     @map("/usecase/leasing")
  usecaseLending                     @map("/usecase/lending")
  usecaseFractionate                 @map("/usecase/fractionate")
  usecaseCompanies                   @map("/usecase/companies")
  roadmap                            @map("/roadmap")
  presale                            @map("/presale")
  team                               @map("/team")
  loa_simulator                      @map("/loa-simulator")
  heritage_art_simulator             @map("/heritage-art-simulator")
  art_salon_simulator_artbasel_paris @map("/art-salon-simulator/artbasel-paris")
  art_salon_simulator_artgeneve      @map("/art-salon-simulator/artgeneve")
  joinInRealArt                      @map("/joinInRealArt")
  joinInRealArt_artists              @map("/joinInRealArt/artists")
  joinInRealArt_galleries            @map("/joinInRealArt/galleries")
  faq                                @map("/faq")
  faq_translated                     @map("/faq/translated")
  glossary                           @map("/glossary")
  contact                            @map("/contact")
  terms                              @map("/terms")
  terms_nft                          @map("/terms-nft")
  legal                              @map("/legal")

  @@schema("landing")
}

// Modèle pour l'en-tête de FAQ détaillée
model DetailedGlossaryHeader {
  id            Int                    @id @default(autoincrement())
  name          String
  glossaryItems DetailedGlossaryItem[]

  @@schema("landing")
}

// Modèle pour les éléments de FAQ détaillée
model DetailedGlossaryItem {
  id                 Int                    @id @default(autoincrement())
  question           String
  answer             String
  detailedGlossaryId Int
  header             DetailedGlossaryHeader @relation(fields: [detailedGlossaryId], references: [id])

  @@index([detailedGlossaryId])
  @@schema("landing")
}

model PresaleArtwork {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  order       Int?
  artistId    Int
  width       Int? //In centimeters
  height      Int? //In centimeters
  price       Int?
  imageUrl    String  @unique
  mockupUrls  Json    @default("[]")
  artist      Artist  @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@schema("landing")
}

model SeoCategory {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  url              String?
  color            String?
  shortDescription String?
  longDescription  String?
  textCTA          String?
  linkCTA          String?
  posts            SeoPost[]

  @@schema("landing")
}

model SeoPost {
  id                   Int        @id @default(autoincrement())
  languageId           Int // Nouvelle relation vers Language
  originalPostId       Int? // Référence vers le post original (null pour l'original)
  title                String
  mainImageUrl         String?
  mainImageAlt         String?
  mainImageCaption     String?
  metaDescription      String
  metaKeywords         String[]
  content              String
  slug                 String
  excerpt              String?
  status               PostStatus @default(DRAFT)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  author               String
  authorLink           String?
  viewsCount           Int        @default(0)
  estimatedReadTime    Int?
  generatedHtml        String?
  generatedArticleHtml String?
  jsonLd               String?
  pinned               Boolean    @default(false)
  categoryId           Int
  listTags             String[]

  // Relations
  language     Language     @relation(fields: [languageId], references: [id])
  category     SeoCategory  @relation(fields: [categoryId], references: [id])
  tags         SeoPostTag[] // Relation pour la logique relationnelle
  originalPost SeoPost?     @relation("PostTranslations", fields: [originalPostId], references: [id])
  translations SeoPost[]    @relation("PostTranslations")

  @@unique([slug, languageId]) // Slug unique par langue
  @@index([languageId])
  @@index([originalPostId])
  @@index([categoryId])
  @@schema("landing")
}

model SeoTag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  slug        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       SeoPostTag[]

  @@schema("landing")
}

model SeoPostTag {
  post      SeoPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  tag       SeoTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())

  @@id([postId, tagId])
  @@schema("landing")
}

model StickyFooter {
  id                    Int       @id @default(autoincrement())
  activeOnAllPages      Boolean   @default(false)
  activeOnSpecificPages Boolean   @default(false)
  specificPages         String[]
  endValidityDate       DateTime? @db.Date
  title                 String?
  text                  String?
  textButton            String?
  buttonUrl             String?

  @@schema("landingUi")
}

enum PostStatus {
  DRAFT
  PUBLISHED

  @@schema("landing")
}

model ArtworkMedium {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]

  @@schema("public")
}

model ArtworkStyle {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]

  @@schema("public")
}

model ArtworkTechnique {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]

  @@schema("public")
}

model Country {
  code      String    @id // Code ISO (ex: FR, US, GB)
  name      String // Nom du pays (ex: France, United States, United Kingdom)
  addresses Address[]
  artists   Artist[]

  @@schema("public")
}

/// =============================
/// Better Auth (schéma backoffice)
/// =============================

model BackofficeAuthUser {
  id            String                  @id
  name          String?
  email         String                  @unique
  emailVerified Boolean                 @default(false)
  image         String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  role          BackofficeUserRoles?
  artistId      Int?
  artist        Artist?                 @relation(fields: [artistId], references: [id])
  addresses     Address[]
  // relations
  sessions      BackofficeAuthSession[]
  accounts      BackofficeAuthAccount[]

  @@index([artistId])
  @@map("user")
  @@schema("backoffice")
}

model BackofficeAuthSession {
  id        String             @id
  expiresAt DateTime
  token     String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      BackofficeAuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
  @@schema("backoffice")
}

model BackofficeAuthAccount {
  id                    String             @id
  accountId             String
  providerId            String
  userId                String
  user                  BackofficeAuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@map("account")
  @@schema("backoffice")
}

model BackofficeAuthVerification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
  @@schema("backoffice")
}
